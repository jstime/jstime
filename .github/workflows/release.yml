on:
  push:
    tags:
      - 'v*'

name: Create Release

jobs:
  build:
    name: Publish for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [
            linux,
            windows,
            macos
        ]
        include:
          - name: linux
            os: ubuntu-latest
            artifact_name: jstime
            asset_name: jstime-linux
            asset_extension: .tar.gz
          - name: windows
            os: windows-latest
            artifact_name: jstime.exe
            asset_name: jstime-windows
            asset_extension: .zip
          - name: macos
            os: macos-latest
            artifact_name: jstime
            asset_name: jstime-macos
            asset_extension: .tar.gz

    steps:
    - uses: actions/checkout@v1

    - name: Set env
      run: |
          RELEASE_VERSION=$(echo ${GITHUB_REF:10})
          echo "asset_name=${{ matrix.asset_name }}-${RELEASE_VERSION}${{ matrix.asset_extension }}" >> $GITHUB_ENV
      shell: bash

    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Build
      run: cargo build --release --locked

    - name: archive release
      shell: bash
      run: |
        cp "target/release/${{ matrix.artifact_name }}" "${{ matrix.artifact_name }}"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a "${asset_name}" "${{ matrix.artifact_name }}"
        else
          tar czf "${asset_name}" "${{ matrix.artifact_name }}"
        fi

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: jstime*${{ matrix.asset_extension }}
        file_glob: true
        tag: ${{ github.ref }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get Release Notes
        id: get-release-notes
        uses: actions/github-script@v4.0.2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { data: {title, body} } = await github.request(`GET /repos/${{ github.repository }}/release-notes`, {
              tag_name: "${{ github.ref }}"
            });
            return body;
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.get-release-notes.outputs.result }}
          draft: false
          prerelease: false

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - run: cargo login ${CRATES_IO_TOKEN}
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      - name: publish jstime_core
        run: cargo publish
        working-directory: core
      - name: Sleep for 30 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '30s'
      - name: publish jstime
        run: cargo publish
        working-directory: cli
